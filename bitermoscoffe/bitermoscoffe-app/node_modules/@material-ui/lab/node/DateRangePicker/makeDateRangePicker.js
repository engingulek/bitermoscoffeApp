"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeDateRangePicker;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var React = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _useUtils = require("../internal/pickers/hooks/useUtils");

var _dateHelpersHooks = require("../internal/pickers/hooks/date-helpers-hooks");

var _propTypes = require("../internal/pickers/constants/prop-types");

var _useValidation = require("../internal/pickers/hooks/useValidation");

var _usePickerState = require("../internal/pickers/hooks/usePickerState");

var _DateRangePickerView = require("./DateRangePickerView");

var _DateRangePickerInput = _interopRequireDefault(require("./DateRangePickerInput"));

var _dateUtils = require("../internal/pickers/date-utils");

var _jsxRuntime = require("react/jsx-runtime");

const useDateRangeValidation = (0, _useValidation.makeValidationHook)(_dateUtils.validateDateRange, {
  isSameError: (a, b) => b !== null && a[1] === b[1] && a[0] === b[0]
});

function makeDateRangePicker(name, Wrapper) {
  const KeyboardDateInputComponent = _DateRangePickerInput.default;
  const PureDateInputComponent = _DateRangePickerInput.default;

  function WrapperComponent(props) {
    const {
      cancelText,
      clearable,
      clearText,
      DateInputProps,
      DialogProps,
      displayStaticWrapperAs,
      okText,
      PopperProps,
      todayText,
      wrapperProps
    } = props,
          other = (0, _objectWithoutPropertiesLoose2.default)(props, ["disableCloseOnSelect", "cancelText", "clearable", "clearText", "DateInputProps", "DialogProps", "displayStaticWrapperAs", "inputFormat", "okText", "onAccept", "onChange", "onClose", "onOpen", "open", "PopperProps", "todayText", "value", "wrapperProps"]);
    const TypedWrapper = Wrapper;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(TypedWrapper, (0, _extends2.default)({
      clearable: clearable,
      clearText: clearText,
      DialogProps: DialogProps,
      PopperProps: PopperProps,
      okText: okText,
      todayText: todayText,
      cancelText: cancelText,
      DateInputProps: DateInputProps,
      KeyboardDateInputComponent: KeyboardDateInputComponent,
      PureDateInputComponent: PureDateInputComponent,
      displayStaticWrapperAs: displayStaticWrapperAs
    }, wrapperProps, other));
  }

  const rangePickerValueManager = {
    emptyValue: [null, null],
    parseInput: _dateUtils.parseRangeInputValue,
    areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])
  };
  const RangePickerWithStateAndWrapper = /*#__PURE__*/React.forwardRef(function RangePickerWithStateAndWrapper(inProps, ref) {
    const props = (0, _styles.unstable_useThemeProps)({
      props: inProps,
      name
    });
    const {
      calendars,
      value,
      onChange,
      mask = '__/__/____',
      startText = 'Start',
      endText = 'End',
      inputFormat: passedInputFormat,
      minDate: minDateProp = _propTypes.defaultMinDate,
      maxDate: maxDateProp = _propTypes.defaultMaxDate
    } = props,
          other = (0, _objectWithoutPropertiesLoose2.default)(props, ["calendars", "value", "onChange", "mask", "startText", "endText", "inputFormat", "minDate", "maxDate"]);
    const utils = (0, _useUtils.useUtils)();
    const minDate = (0, _dateHelpersHooks.useParsedDate)(minDateProp);
    const maxDate = (0, _dateHelpersHooks.useParsedDate)(maxDateProp);
    const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');
    const pickerStateProps = (0, _extends2.default)({}, other, {
      value,
      onChange,
      inputFormat: passedInputFormat || utils.formats.keyboardDate
    });
    const restProps = (0, _extends2.default)({}, other, {
      minDate,
      maxDate
    });
    const {
      pickerProps,
      inputProps,
      wrapperProps
    } = (0, _usePickerState.usePickerState)(pickerStateProps, rangePickerValueManager);
    const validationError = useDateRangeValidation(value, restProps);
    const DateInputProps = (0, _extends2.default)({}, inputProps, restProps, {
      currentlySelectingRangeEnd,
      setCurrentlySelectingRangeEnd,
      startText,
      endText,
      mask,
      validationError,
      ref
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(WrapperComponent, (0, _extends2.default)({
      wrapperProps: wrapperProps,
      DateInputProps: DateInputProps
    }, restProps, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_DateRangePickerView.DateRangePickerView, (0, _extends2.default)({
        open: wrapperProps.open,
        DateInputProps: DateInputProps,
        calendars: calendars,
        currentlySelectingRangeEnd: currentlySelectingRangeEnd,
        setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,
        startText: startText,
        endText: endText
      }, pickerProps, restProps))
    }));
  }); // @ts-expect-error Impossible to save component generics when wrapping with HOC

  return RangePickerWithStateAndWrapper;
}